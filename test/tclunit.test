# ---------------------------------------------------------------------------
#
# -- tclunit.test
#
# ---------------------------------------------------------------------------

package require tcltest 2.2

namespace import -force tcltest::*

package require tclunit

namespace eval tclunit::test {}

# first run as part of a test suite, i.e. with call to test_file_start

test init_for_tests-1.1 {resets variables and arrays} -body {
    tclunit::init_for_tests
    parray tclunit::cto
    parray tclunit::rt
    list [array get tclunit::testResults] [array get ::env TCLTEST_OPTIONS]
} -match glob -output {tclunit::cto(capturing)    = 0
tclunit::cto(failed)       = 0
tclunit::cto(filename)     = 
tclunit::cto(passed)       = 0
tclunit::cto(result)       = 
tclunit::cto(skipped)      = 0
tclunit::cto(statusLine)   = 
tclunit::cto(testName)     = 
tclunit::cto(totalfailed)  = 0
tclunit::cto(totalpassed)  = 0
tclunit::cto(totalskipped) = 0
tclunit::rt(interp)        = *
tclunit::rt(runAllTests)   = 1
tclunit::rt(testDirectory) = 
tclunit::rt(testFile)      = 
tclunit::rt(withGUI)       = 0
} -result {{} {TCLTEST_OPTIONS {-verbose {body pass skip start error}}}}

test run_all_tests-1.1 {call do_run_tests with runAllTests script} -setup {
    rename tclunit::do_run_tests tclunit::test::do_run_tests
    proc tclunit::do_run_tests {args} {puts $args}
} -body {
    tclunit::run_all_tests
} -cleanup {
    rename tclunit::do_run_tests {}
    rename tclunit::test::do_run_tests tclunit::do_run_tests
} -output {{
	package require tcltest
	tcltest::runAllTests
	exit
    }
}

test run_test_file-1.1 {call do_run_tests with testfile script} -setup {
    rename tclunit::do_run_tests tclunit::test::do_run_tests
    proc tclunit::do_run_tests {args} {puts $args}
} -body {
    tclunit::run_test_file run_test_file-1.1-filename
} -cleanup {
    rename tclunit::do_run_tests {}
    rename tclunit::test::do_run_tests tclunit::do_run_tests
} -output {{
	source run_test_file-1.1-filename
	exit
    }
}

test do_run_tests-1.1 {spawn new interp and remote start tests} -constraints {
    emptyTest
}

test capture_test_output-1.1 {read and process a line from the remote interp} -constraints {
    emptyTest
}

test test_file_start-1.1 {initialize a new test suite} -body {
    tclunit::test_file_start test_file_start-1.1-filename
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 0
tclunit::cto(failed)       = 0
tclunit::cto(filename)     = test_file_start-1.1-filename
tclunit::cto(filenames)    = run_test_file-1.1-filename test_file_start-1.1-filename
tclunit::cto(passed)       = 0
tclunit::cto(result)       = 
tclunit::cto(skipped)      = 0
tclunit::cto(statusLine)   = 
tclunit::cto(testName)     = 
tclunit::cto(totalfailed)  = 0
tclunit::cto(totalpassed)  = 0
tclunit::cto(totalskipped) = 0
tclunit::testResults(run_test_file-1.1-filename)   = 
tclunit::testResults(test_file_start-1.1-filename) = 
}

test test_skipped-1.1 {count a skipped test} -body {
    tclunit::test_skipped "++++ test_skipped-1.1 SKIPPED: emptyTest"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 0
tclunit::cto(failed)       = 0
tclunit::cto(filename)     = test_file_start-1.1-filename
tclunit::cto(filenames)    = run_test_file-1.1-filename test_file_start-1.1-filename
tclunit::cto(passed)       = 0
tclunit::cto(result)       = 
tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   = test_file_start-1.1-filename:  Total 1        Passed 0        Skipped 1        Failed 0    
tclunit::cto(testName)     = 
tclunit::cto(totalfailed)  = 0
tclunit::cto(totalpassed)  = 0
tclunit::cto(totalskipped) = 1
tclunit::testResults(run_test_file-1.1-filename)   = 
tclunit::testResults(test_file_start-1.1-filename) = test_file_start-1.1-filename:  Total 1        Passed 0        Skipped 1        Failed 0    
}

test test_started-1.1 {name of just started test} -body {
    tclunit::test_started "---- test_started-1.1 start"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 0
tclunit::cto(failed)       = 0
tclunit::cto(filename)     = test_file_start-1.1-filename
tclunit::cto(filenames)    = run_test_file-1.1-filename test_file_start-1.1-filename
tclunit::cto(passed)       = 0
tclunit::cto(result)       = 
tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   = test_file_start-1.1-filename:  Total 1        Passed 0        Skipped 1        Failed 0    
tclunit::cto(testName)     = test_started-1.1
tclunit::cto(totalfailed)  = 0
tclunit::cto(totalpassed)  = 0
tclunit::cto(totalskipped) = 1
tclunit::testResults(run_test_file-1.1-filename)   = 
tclunit::testResults(test_file_start-1.1-filename) = test_file_start-1.1-filename:  Total 1        Passed 0        Skipped 1        Failed 0    
}

test test_passed-1.1 {count passed test} -body {
    tclunit::test_passed "++++ test_started-1.1 PASSED"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 0
tclunit::cto(failed)       = 0
tclunit::cto(filename)     = test_file_start-1.1-filename
tclunit::cto(filenames)    = run_test_file-1.1-filename test_file_start-1.1-filename
tclunit::cto(passed)       = 1
tclunit::cto(result)       = 
tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   = test_file_start-1.1-filename:  Total 2        Passed 1        Skipped 1        Failed 0    
tclunit::cto(testName)     = test_started-1.1
tclunit::cto(totalfailed)  = 0
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults(run_test_file-1.1-filename)   = 
tclunit::testResults(test_file_start-1.1-filename) = test_file_start-1.1-filename:  Total 2        Passed 1        Skipped 1        Failed 0    
}

test test_failed-1.1 {count failure and mark capturing start} -body {
    tclunit::test_started "---- test_failed-1.1 start"
    tclunit::test_failed "==== test_failed-1.1 count failure and mark capturing start FAILED"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = test_file_start-1.1-filename
tclunit::cto(filenames)    = run_test_file-1.1-filename test_file_start-1.1-filename
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED

tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults(run_test_file-1.1-filename)   = 
tclunit::testResults(test_file_start-1.1-filename) = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-1.1 {capture remaining failure output} -body {
    tclunit::test_failed_continue "==== Contents of test case:"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = test_file_start-1.1-filename
tclunit::cto(filenames)    = run_test_file-1.1-filename test_file_start-1.1-filename
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:

tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults(run_test_file-1.1-filename)   = 
tclunit::testResults(test_file_start-1.1-filename) = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-1.2 {capture remaining failure output, cont'd} -body {
    tclunit::test_failed_continue ""
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = test_file_start-1.1-filename
tclunit::cto(filenames)    = run_test_file-1.1-filename test_file_start-1.1-filename
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:


tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults(run_test_file-1.1-filename)   = 
tclunit::testResults(test_file_start-1.1-filename) = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-1.3 {capture remaining failure output, cont'd} -body {
    tclunit::test_failed_continue "    return foo"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = test_file_start-1.1-filename
tclunit::cto(filenames)    = run_test_file-1.1-filename test_file_start-1.1-filename
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:

    return foo

tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults(run_test_file-1.1-filename)   = 
tclunit::testResults(test_file_start-1.1-filename) = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-1.4 {capture remaining failure output, cont'd} -body {
    tclunit::test_failed_continue ""
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = test_file_start-1.1-filename
tclunit::cto(filenames)    = run_test_file-1.1-filename test_file_start-1.1-filename
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:

    return foo


tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults(run_test_file-1.1-filename)   = 
tclunit::testResults(test_file_start-1.1-filename) = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-1.5 {capture remaining failure output, cont'd} -body {
    tclunit::test_failed_continue "---- Result was:"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = test_file_start-1.1-filename
tclunit::cto(filenames)    = run_test_file-1.1-filename test_file_start-1.1-filename
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:

    return foo

---- Result was:

tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults(run_test_file-1.1-filename)   = 
tclunit::testResults(test_file_start-1.1-filename) = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-1.6 {capture remaining failure output, cont'd} -body {
    tclunit::test_failed_continue "foo"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = test_file_start-1.1-filename
tclunit::cto(filenames)    = run_test_file-1.1-filename test_file_start-1.1-filename
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:

    return foo

---- Result was:
foo

tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults(run_test_file-1.1-filename)   = 
tclunit::testResults(test_file_start-1.1-filename) = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-1.7 {capture remaining failure output, cont'd} -body {
    tclunit::test_failed_continue "---- Result should have been (exact matching):"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = test_file_start-1.1-filename
tclunit::cto(filenames)    = run_test_file-1.1-filename test_file_start-1.1-filename
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:

    return foo

---- Result was:
foo
---- Result should have been (exact matching):
tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults(run_test_file-1.1-filename)   = 
tclunit::testResults(test_file_start-1.1-filename) = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-1.8 {capture remaining failure output, cont'd} -body {
    tclunit::test_failed_continue ""
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = test_file_start-1.1-filename
tclunit::cto(filenames)    = run_test_file-1.1-filename test_file_start-1.1-filename
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:

    return foo

---- Result was:
foo
---- Result should have been (exact matching):

tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults(run_test_file-1.1-filename)   = 
tclunit::testResults(test_file_start-1.1-filename) = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-1.9 {capture remaining failure output, cont'd} -body {
    tclunit::test_failed_continue "==== test_failed-1.1 FAILED"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 0
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = test_file_start-1.1-filename
tclunit::cto(filenames)    = run_test_file-1.1-filename test_file_start-1.1-filename
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:

    return foo

---- Result was:
foo
---- Result should have been (exact matching):
==== test_failed-1.1 FAILED

tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults(run_test_file-1.1-filename)   = 
tclunit::testResults(test_file_start-1.1-filename) = test_file_start-1.1-filename:  Total 3        Passed 1        Skipped 1        Failed 1    
}

test incr_test_counter-1.1 {increment given counter and update status} -constraints {
    emptyTest
} -body {
    # implicitely tested above for the various counters
}

test run_tests-1.1 {start tests according to configuration and report results} -constraints {
    emptyTest
}

test stop_tests-1.1 {stop testing immediately} -constraints {
    emptyTest
}

# second run as single test file, i.e. without call to test_file_start

test init_for_tests-2.1 {resets variables and arrays} -body {
    tclunit::init_for_tests
    parray tclunit::cto
    parray tclunit::rt
    list [array get tclunit::testResults] [array get ::env TCLTEST_OPTIONS]
} -match glob -output {tclunit::cto(capturing)    = 0
tclunit::cto(failed)       = 0
tclunit::cto(filename)     = 
tclunit::cto(passed)       = 0
tclunit::cto(result)       = 
tclunit::cto(skipped)      = 0
tclunit::cto(statusLine)   = 
tclunit::cto(testName)     = 
tclunit::cto(totalfailed)  = 0
tclunit::cto(totalpassed)  = 0
tclunit::cto(totalskipped) = 0
tclunit::rt(interp)        = *
tclunit::rt(runAllTests)   = 1
tclunit::rt(testDirectory) = 
tclunit::rt(testFile)      = 
tclunit::rt(withGUI)       = 0
} -result {{} {TCLTEST_OPTIONS {-verbose {body pass skip start error}}}}

test test_skipped-2.1 {count a skipped test} -body {
    tclunit::test_skipped "++++ test_skipped-1.1 SKIPPED: emptyTest"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 0
tclunit::cto(failed)       = 0
tclunit::cto(filename)     = 
tclunit::cto(passed)       = 0
tclunit::cto(result)       = 
tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   =                     :  Total 1        Passed 0        Skipped 1        Failed 0    
tclunit::cto(testName)     = 
tclunit::cto(totalfailed)  = 0
tclunit::cto(totalpassed)  = 0
tclunit::cto(totalskipped) = 1
tclunit::testResults() =                     :  Total 1        Passed 0        Skipped 1        Failed 0    
}

test test_started-2.1 {name of just started test} -body {
    tclunit::test_started "---- test_started-1.1 start"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 0
tclunit::cto(failed)       = 0
tclunit::cto(filename)     = 
tclunit::cto(passed)       = 0
tclunit::cto(result)       = 
tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   =                     :  Total 1        Passed 0        Skipped 1        Failed 0    
tclunit::cto(testName)     = test_started-1.1
tclunit::cto(totalfailed)  = 0
tclunit::cto(totalpassed)  = 0
tclunit::cto(totalskipped) = 1
tclunit::testResults() =                     :  Total 1        Passed 0        Skipped 1        Failed 0    
}

test test_passed-2.1 {count passed test} -body {
    tclunit::test_passed "++++ test_started-1.1 PASSED"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 0
tclunit::cto(failed)       = 0
tclunit::cto(filename)     = 
tclunit::cto(passed)       = 1
tclunit::cto(result)       = 
tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   =                     :  Total 2        Passed 1        Skipped 1        Failed 0    
tclunit::cto(testName)     = test_started-1.1
tclunit::cto(totalfailed)  = 0
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults() =                     :  Total 2        Passed 1        Skipped 1        Failed 0    
}

test test_failed-2.1 {count failure and mark capturing start} -body {
    tclunit::test_started "---- test_failed-1.1 start"
    tclunit::test_failed "==== test_failed-1.1 count failure and mark capturing start FAILED"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = 
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED

tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults() =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-2.1 {capture remaining failure output} -body {
    tclunit::test_failed_continue "==== Contents of test case:"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = 
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:

tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults() =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-2.2 {capture remaining failure output, cont'd} -body {
    tclunit::test_failed_continue ""
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = 
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:


tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults() =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-2.3 {capture remaining failure output, cont'd} -body {
    tclunit::test_failed_continue "    return foo"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = 
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:

    return foo

tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults() =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-2.4 {capture remaining failure output, cont'd} -body {
    tclunit::test_failed_continue ""
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = 
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:

    return foo


tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults() =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-2.5 {capture remaining failure output, cont'd} -body {
    tclunit::test_failed_continue "---- Result was:"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = 
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:

    return foo

---- Result was:

tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults() =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-2.6 {capture remaining failure output, cont'd} -body {
    tclunit::test_failed_continue "foo"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = 
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:

    return foo

---- Result was:
foo

tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults() =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-2.7 {capture remaining failure output, cont'd} -body {
    tclunit::test_failed_continue "---- Result should have been (exact matching):"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = 
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:

    return foo

---- Result was:
foo
---- Result should have been (exact matching):
tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults() =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-2.8 {capture remaining failure output, cont'd} -body {
    tclunit::test_failed_continue ""
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 1
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = 
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:

    return foo

---- Result was:
foo
---- Result should have been (exact matching):

tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults() =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
}

test test_failed_continue-2.9 {capture remaining failure output, cont'd} -body {
    tclunit::test_failed_continue "==== test_failed-1.1 FAILED"
    parray tclunit::cto
    parray tclunit::testResults
} -output {tclunit::cto(capturing)    = 0
tclunit::cto(failed)       = 1
tclunit::cto(filename)     = 
tclunit::cto(passed)       = 1
tclunit::cto(result)       = ==== test_failed-1.1 count failure and mark capturing start FAILED
==== Contents of test case:

    return foo

---- Result was:
foo
---- Result should have been (exact matching):
==== test_failed-1.1 FAILED

tclunit::cto(skipped)      = 1
tclunit::cto(statusLine)   =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
tclunit::cto(testName)     = test_failed-1.1
tclunit::cto(totalfailed)  = 1
tclunit::cto(totalpassed)  = 1
tclunit::cto(totalskipped) = 1
tclunit::testResults() =                     :  Total 3        Passed 1        Skipped 1        Failed 1    
}
